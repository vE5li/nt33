@ extern function
@extern label printf: Function(Pointer<SignedInteger<8>>, ...)

@ line comment
@@ block comment @@

@ include other modules
module format

@ include other modules with a different name
module vector as vector2

@ import single items
import format::comma_seperated_list

@ import everything in a namespace
import format::string::any

@ branching in every way
import format::integer::(binary, hexadecimal, other::any)

@ export
export (format, binary, hexadecimal)

@ types can be annotated on the left
label string0: String := "label with type annotation"

@ ...but can also be left out completely
label string1 := "label without type annotation"

@ static variables can also be mutable
label string_mutable := mutable "static mutable string"

@ concatinate literals
@label string_concatinated := "concatinated" ~ ' ' ~ "string"

@ special characters are words wrapped in {}
label string_zero_terminated := "zero terminated string{null}"

@ ...and in characters just words
label character_null := 'null'

@ integers
label integer_decimal: Integer := 16

@ different formats are written like
label integer_binary0: Integer := 0b1000

@ ...or like
@label integer_binary1: Integer := 1000B

@ signed integers
label integer_signed: SignedInteger := -16

@ integers with specific size
label integer_32_bit: Integer<32> := 16

@ ...same syntax apply to floats
label float_mutable_16_bit: Float<16> := mutable 16.0

@ boolean
label boolean0 := true

@ boolean with condition
label boolean1 := true && false || true

@ boolean with comparisson resolved at runtime
label boolean_compiletime_comparisson := integer_decimal == 16

@ arrays can be created through the array macro
label array_with_annotation: Array<String, 3> := array?("one", "two", mutable "three")

@ the type can of course be left out
label array := mutable array?("one", "two", mutable "three")

@ tuples can be defined like this
label tuple_with_annotation: (String, Integer) := ("one", 1)

@ tuples can also have labels that can be set in the type
label tuple_with_labels0: (key: String, value: Integer) := ("one", 1)

@ ...or in the instance
label tuple_with_labels1: (key: String, value: Integer) := (key: "one", value: 1)

@ the instance can also overwrite the types field names
label tuple_with_labels2: (key: String, value: Integer) := (new_key: "one", new_value: 1)

@ labels, structures, enumerations and trais can all be marked as public
public label string_public := "public string"

@ structure
structure Circle {

    @ fields can be marked with public
    public position_x: Integer
    public position_y: Integer
    radius: Integer
}

@ enumeration with template
enumeration ErrorOption<T> {

    @ enumerations can be just type identifiers
    None

    @ ...but can also hold values
    Some(T)

    @ ...and can even have values with fields
    Error{ message: String }
}

@ you can copy a type
structure CircleCopy := Circle

@ ...or you can alias it
alias ErrorOptionString := ErrorOption<String>

@ option
label string_maybe0: Option<String> := Some("string")

@ type annotations can also be on the right side of the assignment
label string_maybe1 := Option<String>::Some("string")

@ ...or they can combine in any way you want
label string_maybe2: Option<any> := any<String>::Some("string")

@ flow control like match, if, loop, while and iterate can be resolved at compile time if the input is known
label string_resolved_at_compile_time0 := match boolean0 {
    case true -> pass "boolean0 was true"
    case false -> pass "boolean0 was not true"
}

@ functions are just generic labels with the function type
label function_join0: Function(source: Vector<String>) -> String := {
    return source.iterate_image().join(", ")
}

@ function scopes can also rename the parameters
label function_join1: Function(source: Vector<String>) -> String := (strings) {
    return strings.iterate_image().join(", ")
}

@ you can also omit the names in the type
label function_join2: Function(Vector<String>) -> String := (strings) {
    return strings.iterate_image().join(", ")
}

@ you can even omit the entire type
label function_join3 := (strings) {
    return strings.iterate_image().join(", ")
}

@ since all the parameters are known at compile time, this function call will also be resolved at compile time
label string_resolved_at_compile_time1 := function_join(vector?("this", "this", "that"))

@ make platofrm dependent code with regular syntax
label library := match system_name?() {
    case "windows" -> pass "some_libraray.dll"
    case "linux" -> pass "some_libraray.lib"
}

@ main function
label main: Function(arguments: Vector<String>) -> Integer := {

    @ higher order functions
    label assigned_function := match arguments[0] {
        case "one" -> pass { print_line?("first argument was one") }
        case "2" -> pass { print_line?("first argument was 2") }
        case any: other -> pass { print_line?("first argument was {}", other) }
    }
    assigned_function()

    return 0
}
