@define selector(count) := #clog(#count + 1) - 1:0
@define source(count) := #bit_width * #count - 1:0

define bit_width := 8
define bit_range := #bit_width:0

define test2 := 1
define test1 := 5 + 8 + 9 + '4'
define nicer_label := true ? (2:4) : (3:0)

define negative := -5.2
define character := '3'
define concat := "some" ~ " other" ~ " test " ~ "that works " ~ (!true || true ? #character : '2')
define boolean := true && 4 > 5 && #i_wont_be_resolved
define string := "multiline strings work
and their positions too"

type Once(1)
type Test(8, "name #" ~ #character)

component HalfAdder(in test_parameter, out other_wires[8:0]) {
    Wire range_test[0 ::+ 6]
    Wire test_wires[16:0]
    other_wires := test_wires[8:0]
    Adder(test_wires[16:8], other_wires, test_parameter)
}

component Top(in test: Test) {

    @ wire
    Wire source
    Wire clock := source
@    Wire bacon[#bit_width * 2 - 1:0]
    Wire wires[5:0]
    Wire ham[8:0] := bacon[8:16]
    Wire poal[#bit_range]

    @ type
    Test test := bacon[#bit_range]
    Once superman := bacon[0]
    Adder adder(clock)

    @ logical operator
    Wire test := adder.reeee & clock
    Wire also_test[2:0] := poal[0:2] & poal[2:4] | poal[4:6] ^ poal[6:8]

    @ register
    Register some[8:0] := 220
    Register jonas
    Wire dog := jonas
    dog := 1

    @ back offset index
    Wire stone[6:0]
    Wire sman := stone[-6]
    Wire man[6:0] := stone[6:-6]
}
