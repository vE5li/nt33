module format
module vector

public structure Vector {
    pointer: $Character
    length: Integer
    capacity: Integer
}

public structure String {
    data: Vector
}

public structure Source {
    public source: String
    public file: String
    public line: Integer
    public character: Integer
    public length: Integer
}

public structure Test {
    public test: Integer
    public aliased: $Alias
    public aliased: $Meow
}

alias Alias := Source

alias Meow := Alias

label other: Test := "string test"

implement Test {

    @public label new: Function() -> Self := {
    @    return implied?(5)
    @}
}

@label testing: Function(test: Some) -> Pointer<String> := {
@    label some1 := allocate?()              @ same
@    label some2 := allocate?(String)        @ same
@    memory::write(&some1, test)
@    return some2
@}

@label main: Function() := {
@    label test := Test::new()
@}
